# -*-Shell-script-*-

# This file is not a stand-alone shell script; it provides functions
# to ec2 network scripts that source it.

# Set up a default search path.
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
export PATH

# metadata query requires an interface and hardware address
if [ -z "${INTERFACE}" ] || [ "${INTERFACE}" == "eth0" ] || [ "${INTERFACE}" == "ens3" ]; then
  exit
fi

HWADDR=$(cat /sys/class/net/${INTERFACE}/address 2>/dev/null)
while test "${HWADDR}" = "00:00:00:00:00:00"; do
  sleep 0.1
  HWADDR=$(cat /sys/class/net/${INTERFACE}/address 2>/dev/null)
done

if [ -z "${HWADDR}" ] && [ "${ACTION}" != "remove" ]; then
  exit
fi
export HWADDR

RULES_FILE="/etc/udev/rules.d/69-c2-persistent-net.rules"
release=$(grep -P '^ID=' /etc/os-release | tr -d 'ID=')
METADATA_BASEURL="http://169.254.169.254/latest"
METADATA_MAC_PATH="meta-data/network/interfaces/macs"

# define a config file and generate a routing table number
if [ ${release} == "ubuntu" ]; then
  config_file="/etc/netplan/config-${INTERFACE}.yaml"
  RTABLE=${INTERFACE#ens}
fi

if [ ${release} == "debian" ]; then
  debian_version=$(grep -oP "VERSION_ID=.\\K[0-9]+" /etc/os-release)
  if [ ${debian_version} -lt 11 ]; then
    RTABLE=${INTERFACE#eth}
  else
    RTABLE=${INTERFACE#ens}
  fi
  config_file="/etc/network/interfaces.d/config-${INTERFACE}.cfg"
fi

if [ ${release} == "astra" ]; then
  RTABLE=${INTERFACE#eth}
  config_file="/etc/network/interfaces.d/config-${INTERFACE}.cfg"
fi

let RTABLE+=10000

get_meta() {
  attempts=60
  false
  while [ "${?}" -gt 0 ]; do
    if [ "${attempts}" -eq 0 ]; then
      logger --tag ec2net "[get_meta] Failed to get ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${HWADDR}/${1}"
      return
    fi
    logger --tag ec2net "[get_meta] Trying to get ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${HWADDR}/${1}"
    meta=$(curl -sf ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${HWADDR}/${1})
    if [ "${?}" -gt 0 ]; then
      let attempts--
      sleep 0.5
      false
    fi
  done
  echo "${meta}"
}

verify_meta() {
  verify_mac=$(curl -sf ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${1})
  echo "${verify_mac}"
}

get_cidr() {
  cidr=$(get_meta 'subnet-ipv4-cidr-block')
  echo "${cidr}"
}

get_ipv4s() {
  ipv4s=$(get_meta 'local-ipv4s')
  echo "${ipv4s}"
}

get_primary_ipv4() {
  ipv4s=($(get_ipv4s))
  echo "${ipv4s[0]}"
}

remove_primary() {
  if [ "${INTERFACE}" == "eth0" ] || [ "${INTERFACE}" == "ens3" ]; then
    return
  fi
  logger --tag ec2net "[remove_primary] Removing configs for ${INTERFACE}"
  rm -f ${config_file}
}

rewrite_primary() {
  mac_opt=$(verify_meta "$HWADDR")
  if [ "${INTERFACE}" == "eth0" ] || [ "${INTERFACE}" == "ens3" ] || [ -z "${mac_opt}" ]; then
    exit
  fi
  logger --tag ec2net "[rewrite_primary] Creating configs for ${INTERFACE}"
  cidr=$(get_cidr)
  if [ -z ${cidr} ]; then
    return
  fi
  network=$(echo ${cidr}|cut -d/ -f1)
  router=$(( $(echo ${network}|cut -d. -f4) + 1))
  gateway="$(echo ${network}|cut -d. -f1-3).${router}"
  primary_ipv4="$(get_primary_ipv4)"
  if [ ${release} == "ubuntu" ]; then
    version=$(grep -oP "VERSION_ID=.\\K[0-9]+\\.[0-9]+" /etc/os-release | tr -d ".")
    if [ ${version} -gt 2004 ]; then
      cat <<- EOF > ${config_file}
# This file was automatically generated by the $0 program.
# EC2SYNC option allow automatic manage interface, for example, rewriting or deleting a config
# for interface, rewriting or deleting a routes and routing rules.
# If you need custom configurations for interface you must specify "no" for EC2SYNC.
# Don't uncomment and change the format, it is available only "yes" or "no" option.
# EC2SYNC=yes

# Configuration for interface ${INTERFACE}
network:
  version: 2
  renderer: networkd
  ethernets:
    ${INTERFACE}:
      match:
        macaddress: ${HWADDR}
      dhcp4: true
      dhcp4-overrides:
              use-routes: false
      routing-policy:
        - from: ${primary_ipv4}
          table: ${RTABLE}
      routes:
        - to: 0.0.0.0/0
          via: ${gateway}
          table: ${RTABLE}
        - to: ${cidr}
          via: ${gateway}
          table: ${RTABLE}
EOF
    else
      cat <<- EOF > ${config_file}
# This file was automatically generated by the $0 program.
# EC2SYNC option allow automatic manage interface, for example, rewriting or deleting a config
# for interface, rewriting or deleting a routes and routing rules.
# If you need custom configurations for interface you must specify "no" for EC2SYNC.
# Don't uncomment and change the format, it is available only "yes" or "no" option.
# EC2SYNC=yes

# Configuration for interface ${INTERFACE}
network:
  version: 2
  renderer: networkd
  ethernets:
    ${INTERFACE}:
      match:
        macaddress: ${HWADDR}
      dhcp4: true
      dhcp4-overrides:
              use-routes: false
      routes:
        - to: 0.0.0.0/0
          via: ${gateway}
          table: ${RTABLE}
        - to: ${cidr}
          via: ${gateway}
          table: ${RTABLE}
EOF
    fi
  fi
  if [ ${release} == "debian" ]; then
    cat <<- EOF > ${config_file}
# This file was automatically generated by the $0 program.
# EC2SYNC option allow automatic manage interface, for example, rewriting or deleting a config
# for interface, rewriting or deleting a routes and routing rules.
# If you need custom configurations for interface you must specify "no" for EC2SYNC.
# Don't uncomment and change the format, it is available only "yes" or "no" option.
# EC2SYNC=yes

# Configuration for interface ${INTERFACE}
auto ${INTERFACE}
iface ${INTERFACE} inet dhcp
    hwaddress ether ${HWADDR}
post-up ip route add default via ${gateway} dev ${INTERFACE} table ${RTABLE}
post-up ip route add ${cidr} dev ${INTERFACE} proto kernel scope link src ${primary_ipv4} table ${RTABLE}
post-down ip route del default via ${gateway} dev ${INTERFACE} table ${RTABLE}
post-down ip route del ${cidr} dev ${INTERFACE} proto kernel scope link src ${primary_ipv4} table ${RTABLE}
EOF
  fi
  if [ ${release} == "astra" ]; then
    cat <<- EOF > ${config_file}
# This file was automatically generated by the $0 program.
# EC2SYNC option allow automatic manage interface, for example, rewriting or deleting a config
# for interface, rewriting or deleting a routes and routing rules.
# If you need custom configurations for interface you must specify "no" for EC2SYNC.
# Don't uncomment and change the format, it is available only "yes" or "no" option.
# EC2SYNC=yes

# Configuration for interface ${INTERFACE}
auto ${INTERFACE}
iface ${INTERFACE} inet dhcp
    hwaddress ether ${HWADDR}
post-up ip route add default via ${gateway} dev ${INTERFACE} table ${RTABLE}
post-up ip route add ${cidr} dev ${INTERFACE} proto kernel scope link src ${primary_ipv4} table ${RTABLE}
post-down ip route del default via ${gateway} dev ${INTERFACE} table ${RTABLE}
post-down ip route del ${cidr} dev ${INTERFACE} proto kernel scope link src ${primary_ipv4} table ${RTABLE}
EOF
  fi
}

remove_rules() {
  if [ "${INTERFACE}" == "eth0" ] || [ "${INTERFACE}" == "ens3" ]; then
    return
  fi
  logger --tag ec2net "[remove_rules] Removing rules for ${INTERFACE}"
  for rule in $(/sbin/ip -4 rule list \
                |grep "from .* lookup ${RTABLE}" \
                |awk -F: '{print $1}'); do
    /sbin/ip -4 rule delete pref "${rule}"
  done
}

rewrite_rules() {
  if [ "${INTERFACE}" == "eth0" ] || [ "${INTERFACE}" == "ens3" ]; then
    return
  fi
  ips=($(get_ipv4s))
  logger --tag ec2net "[rewrite_rules] Rewriting rules for ${INTERFACE}"
  declare -A rules
  for rule in $(/sbin/ip -4 rule list \
                |grep "from .* lookup ${RTABLE}" \
                |awk '{print $1$3}'); do
    split=(${rule//:/ })
    rules[${split[1]}]=${split[0]}
  done
  for ip in ${ips[@]}; do
    if [[ ${rules[${ip}]} ]]; then
      unset rules[${ip}]
    else
      /sbin/ip -4 rule add from ${ip} lookup ${RTABLE}
    fi
  done
}

if [ -s ${config_file} ]; then
  # make no changes to unmanaged interfaces
  unmanaged=$(LANG=C grep -l "^#[[:space:]]EC2SYNC=no\([[:space:]#]\|$\)" $config_file)
  if [ "${config_file}" == "${unmanaged}" ]; then
    logger --tag ec2net "Not managing ${INTERFACE}"
    exit
  fi
  # validate export hwaddr in a config file for managed interfaces
  if [ -z $(grep -o "${HWADDR}" ${config_file}) ]; then
    logger --tag ec2net "MAC-address in config for interface ${INTERFACE} incorrect, it will be remove"
    remove_rules
    remove_primary
  fi
fi

plug_interface() {
  logger --tag ec2net "[plug_interface] ${INTERFACE} plugged"
  rewrite_primary
  rewrite_rules
}

unplug_interface() {
  logger --tag ec2net "[unplug_interface] ${INTERFACE} unplugged"
  remove_rules
  remove_primary
  sed "/$INTERFACE/{N;d}" -i ${RULES_FILE}
  if [ ${release} == "ubuntu" ]; then
    echo "netplan apply" |at now
  fi
}

activate_primary() {
  logger --tag ec2net "[activate_primary] Activating ${INTERFACE}"
  if [ ${release} == "ubuntu" ]; then
    echo "netplan apply" |at now
  else
    /sbin/ifup ${INTERFACE}
  fi
}

deactivate_primary() {
  logger --tag ec2net "[deactivate_primary] Deactivating ${INTERFACE}"
  if [ ${release} == "ubuntu" ]; then
    /sbin/ip link set ${INTERFACE} down
  else
    /sbin/ifdown ${INTERFACE}
  fi
}
