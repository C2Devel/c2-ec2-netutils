# -*-Shell-script-*-

# This file is not a stand-alone shell script; it provides functions
# to ec2 network scripts that source it.

# Set up a default search path.
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
export PATH

# metadata query requires an interface and hardware address
if [ -z "${INTERFACE}" ] || [ "${INTERFACE}" == "eth0" ]; then
  exit
fi

HWADDR=$(cat /sys/class/net/${INTERFACE}/address 2>/dev/null)
while test "${HWADDR}" = "00:00:00:00:00:00"; do
  sleep 0.1
  HWADDR=$(cat /sys/class/net/${INTERFACE}/address 2>/dev/null)
done

if [ -z "${HWADDR}" ] && [ "${ACTION}" != "remove" ]; then
  exit
fi
export HWADDR

# generate a routing table number
RTABLE=${INTERFACE#eth}
let RTABLE+=10000

RULES_FILE="/etc/udev/rules.d/69-c2-persistent-net.rules"
METADATA_BASEURL="http://169.254.169.254/latest"
METADATA_MAC_PATH="meta-data/network/interfaces/macs"
config_file="/etc/sysconfig/network/ifcfg-${INTERFACE}"
route_file="/etc/sysconfig/network/ifroute-${INTERFACE}"

get_meta() {
  attempts=60
  false
  while [ "${?}" -gt 0 ]; do
    if [ "${attempts}" -eq 0 ]; then
      logger --tag ec2net "[get_meta] Failed to get ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${HWADDR}/${1}"
      return
    fi
    logger --tag ec2net "[get_meta] Trying to get ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${HWADDR}/${1}"
    meta=$(curl -sf ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${HWADDR}/${1})
    if [ "${?}" -gt 0 ]; then
      let attempts--
      sleep 0.5
      false
    fi
  done
  echo "${meta}"
}

verify_meta() {
  verify_mac=$(curl -sf ${METADATA_BASEURL}/${METADATA_MAC_PATH}/${1})
  echo "${verify_mac}"
}

get_cidr() {
  cidr=$(get_meta 'subnet-ipv4-cidr-block')
  echo "${cidr}"
}

get_ipv4s() {
  ipv4s=$(get_meta 'local-ipv4s')
  echo "${ipv4s}"
}

get_primary_ipv4() {
  ipv4s=($(get_ipv4s))
  echo "${ipv4s[0]}"
}

remove_primary() {
  if [ "${INTERFACE}" == "eth0" ]; then
    return
  fi
  logger --tag ec2net "[remove_primary] Removing configs for ${INTERFACE}"
  rm -f ${config_file}
  rm -f ${route_file}
}

rewrite_primary() {
  mac_opt=$(verify_meta "$HWADDR")
  if [ "${INTERFACE}" == "eth0" ] || [ -z "${mac_opt}" ]; then
    exit
  fi
  logger --tag ec2net "[rewrite_primary] Creating configs for ${INTERFACE}"
  cidr=$(get_cidr)
  if [ -z ${cidr} ]; then
    return
  fi
  network=$(echo ${cidr}|cut -d/ -f1)
  router=$(( $(echo ${network}|cut -d. -f4) + 1))
  gateway="$(echo ${network}|cut -d. -f1-3).${router}"
  primary_ipv4="$(get_primary_ipv4)"
  cat <<- EOF > ${config_file}
# This file was automatically generated by c2-ec2-netutils.
# Changes to this file and other interface configuration do not persist.
# If you need custom configuration for this interface you have to set EC2SYNC to "no".
# Don't uncomment it. Only "yes" or "no" values are supported.
# EC2SYNC=yes

STARTMODE=auto
BOOTPROTO=dhcp4
DHCLIENT_CLIENT_ID=01:${HWADDR}
EOF
  cat <<- EOF > ${route_file}
# <Destination> <Gateway> <Netmask> <Interface> <Options>
${gateway} - - ${INTERFACE} table ${RTABLE} # say that gw can be reached directly
# https://github.com/openSUSE/wicked/wiki/FAQ#q-why-wicked-does-not-set-my-default-static-route

default ${gateway} - ${INTERFACE} table ${RTABLE} proto static
${cidr} - - ${INTERFACE} proto static scope link table ${RTABLE}
EOF
}

remove_rules() {
  if [ "${INTERFACE}" == "eth0" ]; then
    return
  fi
  logger --tag ec2net "[remove_rules] Removing rules for ${INTERFACE}"
  for rule in $(/sbin/ip -4 rule list \
                |grep "from .* lookup ${RTABLE}" \
                |awk -F: '{print $1}'); do
    /sbin/ip -4 rule delete pref "${rule}"
  done
}

rewrite_rules() {
  if [ "${INTERFACE}" == "eth0" ]; then
    return
  fi
  ips=($(get_ipv4s))
  logger --tag ec2net "[rewrite_rules] Rewriting rules for ${INTERFACE}"
  declare -A rules
  for rule in $(/sbin/ip -4 rule list \
                |grep "from .* lookup ${RTABLE}" \
                |awk '{print $1$3}'); do
    split=(${rule//:/ })
    rules[${split[1]}]=${split[0]}
  done
  for ip in ${ips[@]}; do
    if [[ ${rules[${ip}]} ]]; then
      unset rules[${ip}]
    else
      /sbin/ip -4 rule add from ${ip} lookup ${RTABLE}
    fi
  done
}

if [ -s ${config_file} ]; then
  # make no changes to unmanaged interfaces
  unmanaged=$(LANG=C grep -l "^#[[:space:]]EC2SYNC=no\([[:space:]#]\|$\)" $config_file)
  if [ "${config_file}" == "${unmanaged}" ]; then
    logger --tag ec2net "Not managing ${INTERFACE}"
    exit
  fi
  # validate exported hwaddr in a config file for managed interfaces
  if [ -z $(grep -o "${HWADDR}" ${config_file}) ] && [ "${ACTION}" != "remove" ]; then
    remove_rules
    remove_primary
  fi
fi

plug_interface() {
  logger --tag ec2net "[plug_interface] ${INTERFACE} plugged"
  rewrite_primary
  rewrite_rules
}

unplug_interface() {
  logger --tag ec2net "[unplug_interface] ${INTERFACE} unplugged"
  remove_rules
  remove_primary
  if [ -z $(cat /sys/class/net/${INTERFACE}/address 2>/dev/null) ]; then
  sed "/$INTERFACE/{N;d}" -i ${RULES_FILE}
  fi
}

activate_primary() {
  logger --tag ec2net "[activate_primary] Activating ${INTERFACE}"
  /sbin/ifup ${INTERFACE}
}

deactivate_primary() {
  logger --tag ec2net "[deactivate_primary] Deactivating ${INTERFACE}"
  /sbin/ifdown ${INTERFACE}
}
